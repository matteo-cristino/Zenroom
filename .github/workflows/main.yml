name: zenroom
on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '*.md'

jobs:
  python-build-check:
    name: üêç Python build & checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [38, 39, 310, 311]
        platform_id: [manylinux_x86_64, manylinux_i686, manylinux_aarch64, macosx_x86_64]
        exclude:
          - os: macos-latest
            platform_id: manylinux_x86_64
          - os: macos-latest
            platform_id: manylinux_i686
          - os: macos-latest
            platform_id: manylinux_aarch64
          - os: ubuntu-latest
            platform_id: macosx_x86_64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: docker/setup-qemu-action@v2
        if: runner.os == 'Linux'
        with:
          platforms: all
      - name: Build wheels
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-${{ matrix.platform_id }}
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_BUILD_LINUX: echo "Acquire::Retries \"5\";" | sudo tee /etc/apt/apt.conf.d/avoid-timeouts && apt-get update && apt-get install -y cmake zsh vim && pip install meson ninja
          CIBW_BEFORE_BUILD_MACOS: brew install cmake zsh && pip install meson ninja
          CIBW_TEST_EXTRAS: "test"
          CIBW_TEST_COMMAND: "pytest -s {project}/tests"
        run: |
          # Remove shared library
          rm -f bindings/golang/zenroom/lib/libzenroom.so
          cd bindings/python3
          ./prepare.sh
          pip install cibuildwheel
          cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v3
        with:
          path: ./bindings/python3/wheelhouse/*.whl

  python-build-check-armv7:
    name: üêç Python build & check on armv7
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: uraimo/run-on-arch-action@v2
        name: Build wheels
        with:
          arch: armv7
          distro: ubuntu22.04
          install: |
            apt-get update
            apt-get install -y git vim zsh software-properties-common cmake ninja-build
          run: |
            # preparation
            git config --global --add safe.directory /home/runner/work/Zenroom/Zenroom
            # default python version is 3.10
            if [[ ${{ matrix.python_version }} != '3.10' ]]; then
              add-apt-repository -y ppa:deadsnakes/ppa && apt-get update
              apt-get install -y python${{ matrix.python_version }} python${{ matrix.python_version }}-distutils
              py_3=`which python3`
              py_310=`which python3.10`
              py=`which python${{ matrix.python_version }}`
              update-alternatives --install $py_3 python3 $py_310 1
              update-alternatives --install $py_3 python3 $py 2
              update-alternatives --set python3 $py
            fi
            apt-get install -y python3-pip && python3 -m pip install --upgrade pip
            pip install meson wheel pytest schema
            # build
            rm -f bindings/golang/zenroom/lib/libzenroom.so
            cd bindings/python3
            ./prepare.sh
            python3 setup.py bdist_wheel
            mkdir ../../wheelhouse && cp dist/*.whl ../../wheelhouse
            # tests
            pip install ./dist/*.whl
            pytest -s tests
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  python-sdist:
    name: üêç Python create source distribution
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: bindings/python3
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: |
        sudo apt-get install --force-yes cmake vim zsh
        pip install meson ninja twine
        ./prepare.sh
    - run: pipx run build --sdist
    - run: twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v3
      with:
        path: ./bindings/python3/dist/*.tar.gz

name: zenroom
on: push
#  push:
#    paths-ignore:
#      - 'docs/**'
#      - 'examples/**'
#      - '*.md'
#    branches:
#    - master
#  pull_request:
#    branches:
#    - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  reuse:
    name: üö® REUSE Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: fsfe/reuse-action@v1


  c-lint:
    name: üö® C lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-cpplint@master
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          targets: --recursive src
          level: warning
          flags: --linelength=120 # Optional
          filter: "-readability/braces\
            ,-readability/casting\
            ,-whitespace/comma\
            ,-whitespace/braces\
            ,-whitespace/comments\
            ,-whitespace/indent\
            ,-whitespace/newline\
            ,-whitespace/operators\
            ,-whitespace/parens\
            ,-whitespace/tab\
            " # Optional
        #    - name: Fail fast?!
        #      if: steps.linter.outputs.checks-failed > 0
        #      run: |
        #        echo "üò§ Some files failed the C linting checks!"

  lua-lint:
    name: üö® Lua lint
    runs-on: ubuntu-latest
    steps:
    # - uses: dorny/paths-filter@v2
    #   with:
    #     filters: |
    #       src:
    #         - 'src/lua'
    # - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v3
    - name: Setup luacheck
      run: |
          if ! hash luacheck &>/dev/null; then
            sudo apt-get install -yq luarocks 1>/dev/null || exit 1
            sudo luarocks install luacheck 1>/dev/null || exit 1
            sudo luarocks install lanes &>/dev/null || true
          fi
          luacheck --version
      shell: bash
    - name: üö® LUA lint
      continue-on-error: true
      working-directory: src/lua
      run: |
        luacheck --config .luacheckrc --std lua54 .

  meson-build:
    name: ü•∑ meson/ninja build
    needs: [reuse, c-lint, lua-lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_MESON')"
    strategy:
      matrix:
        compiler: [clang-9, clang-10, clang-11, gcc-7, gcc-8, gcc-9, gcc-10]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install compiler and dependencies
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get install --force-yes ${{ matrix.compiler }}
          sudo apt-get install --force-yes cmake vim zsh luajit lua-cjson ccache
          pip3 install meson ninja
      - uses: hendrikmuhs/ccache-action@v1.2
      - run: make meson-ccache && ninja -C meson
        env:
          CC: ${{ matrix.compiler }}
      - run: make meson-test

  go-build-check:
    name: üêπ go build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_GO')"
    strategy:
      matrix:
        go: ['1.13', '1.14', '1.15', '1.16', '1.19']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: |
          pip3 install meson ninja
          sudo apt-get install --force-yes zsh
      - run: make linux-go
      - run: cp meson/libzenroom.so bindings/golang/zenroom/lib
      - name: üß™ test bindings go-${{ matrix.go }}
        working-directory: bindings/golang/zenroom
        run: make test
      - name: üîê check crypto with go-${{ matrix.go }}
        run: make check-go

  rust-build-check:
    name: ü¶Ä rust build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_RUST')"
    strategy:
      matrix:
        rust: ['stable', 'nightly']
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      - run: |
          pip3 install meson ninja
          sudo apt-get install --force-yes zsh
      - run: make linux-rust
      - name: üß™ test bindings rust-${{ matrix.rust }}
        working-directory: bindings/rust
        run: cargo test
      - name: üîê check crypto with rust-${{ matrix.rust }}
        run: make check-rs

  cortex-m-build-check:
    name: üìü cortex-m build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'run cortex') || contains(github.event.head_commit.message, 'run cortex') }}
    steps:
      - uses: actions/checkout@v3
      - uses: numworks/setup-arm-toolchain@2021-10
      - run: sudo apt install zsh qemu-system-arm
      - name: Download cmsis
        run: |
          curl -LO https://github.com/ARM-software/CMSIS_5/archive/refs/tags/5.7.0.tar.gz
          tar xvf 5.7.0.tar.gz -C lib
          mv lib/CMSIS_5-5.7.0 lib/cmsis
      - run: make cortex-arm
      - name: üîê check crypto with cortex-m
        run: make check-cortex-m

  js-build-check:
    name: üêØ js build & checks
    needs: [reuse, c-lint, lua-lint]
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_JS')"
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    env:
      EM_VERSION: latest
    defaults:
      run:
        working-directory: bindings/javascript
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{ env.EM_VERSION }}
      - run: sudo apt-get update; sudo apt-get install zsh meson ninja-build
      - run: yarn
      - run: yarn build
        env:
          EMSCRIPTEN: ${{ env.EMSDK }}/upstream/emscripten
      - run: yarn version --new-version $(npm show zenroom version)-$(git rev-parse --short HEAD) --no-git-tag-version
      - if: ${{ matrix.node-version == '16.x' }}
        uses: actions/upload-artifact@v3
        with:
          name: javascript-artifact
          path: |
            ./bindings/javascript/CHANGELOG.md
            ./bindings/javascript/LICENSE
            ./bindings/javascript/package.json
            ./bindings/javascript/README.md
            ./bindings/javascript/dist/
            ./VERSION
      - name: üß™ test bindings node-${{ matrix.node-version }}
        run: yarn test
      - name: üîê check crypto with node-${{ matrix.node-version }}
        working-directory: ./
        run: make check-js

  python-check:
    name: üêç Python checks
    needs: [reuse, c-lint, lua-lint]
    if: "!contains(github.event.pull_request.labels.*.name, 'SKIP_PY') && github.event_name == 'pull_request'"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: bindings/python3
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt install --force-yes zsh
        if: runner.os == 'Linux'
      - run: brew install zsh
        if: runner.os == 'Darwin'
      - run: |
          pip3 install meson ninja
          pip3 install .[test]
      - run: pytest -s tests

  linux-crypto-check:
    name: üêß Linux crypto tests
    runs-on: ubuntu-latest
    needs: [reuse, c-lint, lua-lint]
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt install zsh jq meson
          make linux
          make check-crypto

  macosx-crypto-check:
    name: üçé macos crypto tests
    runs-on: macos-latest
    needs: [reuse, c-lint, lua-lint]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: |
          pip3 install meson ninja
          make osx
          make check-osx

  check-commit-status:
    name: üë∑ check commit status
    runs-on: ubuntu-latest
    needs: [rust-build-check, go-build-check, meson-build, js-build-check, linux-crypto-check, macosx-crypto-check]
    outputs:
      output: ${{ steps.success.outputs.test }}
    if: ${{ github.event_name == 'push' }} # github.ref_name == 'master' &&
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Failure
        id: failure
        if: ${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'skipped') }}
        run: exit 1
      - name: Success
        id: success
        if: steps.failure.conclusion == 'skipped'
        run: |
          success=1; i=1
          while [ true ]; do
            h=`git log HEAD~$i -1 --pretty=format:"%H"`
            i=$((i+1))
            url="https://api.github.com/repos/${{ github.repository }}/commits/$h/status"
            state=`curl -H "Accept: application/vnd.github+json" $url | jq -r '.state'`
            if [[ $state == "failure" || $h == "b675846b230ea0d012d969a9f11782d4046b0094" ]]; then
              echo "test=Failure" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [[ $state == "success" ]]; then
              success=$((success+1))
              if [[ $success == 3 ]]; then
                echo "test=Success" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
          done

  python-build-check:
    name: üêç Python build & checks
    needs: [check-commit-status]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [38, 39, 310, 311]
        platform_id: [manylinux_x86_64, manylinux_i686, manylinux_aarch64, macosx_x86_64]
        exclude:
          - os: macos-latest
            platform_id: manylinux_x86_64
          - os: macos-latest
            platform_id: manylinux_i686
          - os: macos-latest
            platform_id: manylinux_aarch64
          - os: ubuntu-latest
            platform_id: macosx_x86_64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: docker/setup-qemu-action@v2
        if: runner.os == 'Linux'
        with:
          platforms: all
      - name: debug
        run: echo ${{ needs.check-commit-status.outputs.output }}
      - name: Stable release
        if: ${{ needs.check-commit-status.outputs.output == 'Success' }}
        run: |
          pip install zenroom
          zenroom_pip_version=`pip show zenroom | grep "Version:" | cut -d " " -f 2`
          repo_version=`cat VERSION`
          latest_version=`echo -e "${zenroom_pip_version}\n${repo_version}" | sort -V | tail -n 1`
          echo $zenroom_pip_version
          echo $repo_version
          echo $latest_version
          if [[ ${repo_version} == ${latest_version} ]]; then
            next_version=${repo_version}
          else
            next_version=`echo ${zenroom_pip_version} | awk -F. -v OFS=. '{$NF=$NF+1; print}'`
          fi
          echo $next_version
          sed -ie "s/version=get_python_version()/version=\'${next_version}\'/" bindings/python3/setup.py
      - name: Build wheels
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-${{ matrix.platform_id }}
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_BUILD_LINUX: apt-get update && apt-get install -y cmake zsh vim && pip install meson ninja
          CIBW_BEFORE_BUILD_MACOS: brew install cmake zsh && pip install meson ninja
          CIBW_TEST_EXTRAS: "test"
          CIBW_TEST_COMMAND: "pytest -s {project}/bindings/python3/tests"
        run: |
          git show -s --format=%ct HEAD > commit_time
          # Remove shared library
          rm -f bindings/golang/zenroom/lib/libzenroom.so
          cp bindings/python3/setup.py .
          pip install cibuildwheel
          cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  python-sdist:
    name: üêç Python create source distribution
    runs-on: ubuntu-latest
    needs: [python-build-check]
    defaults:
      run:
        working-directory: bindings/python3
    steps:
    - uses: actions/checkout@v3
    - run: |
          sudo apt-get install --force-yes cmake vim zsh
          pip install meson ninja twine
    - run: pipx run build --sdist
    - run: twine check dist/*.tar.gz
    - uses: actions/upload-artifact@v3
      with:
        path: ./bindings/python3/dist/*.tar.gz

  npm-release:
    name: üì¶ npm release
    runs-on: ubuntu-latest
    needs: [check-commit-status]
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/download-artifact@v3
        with:
          name: javascript-artifact
          path: .
      - name: Stable release
        if: ${{ needs.check-commit-status.outputs.output == 'Success' }}
        run: |
          zenroom_npm_version=`npm show zenroom version`
          repo_version=`cat VERSION`
          latest_version=`echo -e "${zenroom_npm_version}\n${repo_version}" | sort -V | tail -n 1`
          echo $zenroom_npm_version
          echo $repo_version
          echo $latest_version
          if [[ ${repo_version} == ${latest_version} ]]; then
            next_version=${repo_version}
          else
            next_version=`echo ${zenroom_npm_version} | awk -F. -v OFS=. '{$NF=$NF+1; print}'`
          fi
          echo $next_version
          cd bindings/javascript
          yarn version --new-version ${next_version} --no-git-tag-version
          cat package.json
          npm publish . --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - if: ${{ needs.check-commit-status.outputs.output == 'Failure' }}
        run: npm publish . --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  pypi-release:
    name: üì¶ PyPI release
    needs: [python-sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-commit-status:
    name: üèÜ Commit status
    needs: [check-commit-status] # [npm-release, pypi-release]
    runs-on: ubuntu-latest
    steps:
      - name: Failure
        id: failure
        if: ${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'skipped') }}
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
          "context": "Zenroom",
          "state": "failure",
          "description": "Zenroom tests, build or release failed",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      - name: Success
        if: steps.failure.conclusion == 'skipped'
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
          "context": "Zenroom",
          "state": "success",
          "description": "Zenroom tests, build and release secceeded",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
